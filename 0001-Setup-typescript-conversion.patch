From c1ee2f75b982fbc4208ae1ebafd8f485b38d0c6a Mon Sep 17 00:00:00 2001
From: JanisSeibutis <janis.seibutis@gmail.com>
Date: Sun, 22 Dec 2024 18:16:57 +0100
Subject: [PATCH] Setup typescript conversion

---
 checkout.mjs => checkout.ts         |   2 +-
 main.mjs => main.ts                 |  84 +++++++++++----------
 package-lock.json                   |  14 ++++
 package.json                        |   3 +-
 products.mjs => products.ts         |  27 +++----
 sorting.mjs => sorting.ts           |   4 +-
 theme-toggle.mjs => theme-toggle.ts |   0
 tsconfig.json                       | 111 ++++++++++++++++++++++++++++
 8 files changed, 187 insertions(+), 58 deletions(-)
 rename checkout.mjs => checkout.ts (99%)
 rename main.mjs => main.ts (88%)
 rename products.mjs => products.ts (68%)
 rename sorting.mjs => sorting.ts (92%)
 rename theme-toggle.mjs => theme-toggle.ts (100%)
 create mode 100644 tsconfig.json

diff --git a/checkout.mjs b/checkout.ts
similarity index 99%
rename from checkout.mjs
rename to checkout.ts
index 32aa16c..51e2f04 100644
--- a/checkout.mjs
+++ b/checkout.ts
@@ -4,7 +4,7 @@ import {
   shallowCopyCartItems,
   resetPage,
   formSection,
-} from './main.mjs'
+} from './main'
 
 // Definerade variabler
 export const header = document.querySelector('header')
diff --git a/main.mjs b/main.ts
similarity index 88%
rename from main.mjs
rename to main.ts
index 78f330d..953b921 100644
--- a/main.mjs
+++ b/main.ts
@@ -1,47 +1,49 @@
 import '/styles/style.scss'
-import productArray from './products.mjs'
-import { toggleTheme } from './theme-toggle.mjs'
-import { sortingFunc } from './sorting.mjs'
-import { renderCheckout, header, validateForm } from './checkout.mjs'
+import {productArray,Product} from './products'
+import { toggleTheme } from './theme-toggle'
+import { sortingFunc } from './sorting'
+import { renderCheckout, header, validateForm } from './checkout'
 
 // Storlek på produktbilder
-const productImageWidth = 1024
-const productImageHeight = 1024
+const productImageWidth: number = 1024
+const productImageHeight: number = 1024
+
+type HtmlEl = HTMLElement | null
 
 // Definerade variabler
-const productDiv = document.querySelector('#products')
-const cart = document.querySelector('.cart')
-const cartModal = document.querySelector('.cart-modal')
-const cartProducts = document.querySelector('.cart-products')
-const cartTotalPrice = document.querySelector('.cart-total-price')
-const closeCartBtn = document.querySelector('.cart-close-btn')
-const subCartBtn = document.querySelector('.cart-sub-btn')
-const discount = document.querySelector('.discount-info')
-const shippingCost = document.querySelector('.shipping-cost')
-const productCost = document.querySelector('.product-cost')
-const backToBasketBtn = document.querySelector('.form__close')
-const footer = document.querySelector('footer')
-const cartAmount = document.querySelector('.cart-amount')
-const totalPrice = document.querySelector('.total-price')
-const mainInfo = document.querySelector('.main__info')
-const productWrap = document.querySelector('.product-wrap')
-const themeToggleBtn = document.querySelector('.theme-toggle')
-
-export const formSection = document.querySelector('#order-summary')
+const productDiv: HtmlEl = document.querySelector('#products')
+const cart: HtmlEl = document.querySelector('.cart')
+const cartModal: HtmlEl = document.querySelector('.cart-modal')
+const cartProducts: HtmlEl = document.querySelector('.cart-products')
+const cartTotalPrice: HtmlEl = document.querySelector('.cart-total-price')
+const closeCartBtn: HtmlEl = document.querySelector('.cart-close-btn')
+const subCartBtn: HtmlEl = document.querySelector('.cart-sub-btn')
+const discount: HtmlEl = document.querySelector('.discount-info')
+const shippingCost: HtmlEl = document.querySelector('.shipping-cost')
+const productCost: HtmlEl = document.querySelector('.product-cost')
+const backToBasketBtn: HtmlEl = document.querySelector('.form__close')
+const footer: HtmlEl = document.querySelector('footer')
+const cartAmount: HtmlEl = document.querySelector('.cart-amount')
+const totalPrice: HtmlEl = document.querySelector('.total-price')
+const mainInfo: HtmlEl = document.querySelector('.main__info')
+const productWrap: HtmlEl = document.querySelector('.product-wrap')
+const themeToggleBtn: HtmlEl = document.querySelector('.theme-toggle')
+
+export const formSection: HtmlEl = document.querySelector('#order-summary')
 
 toggleTheme()
 
 // Varukorgslista
-let cartItems = []
+let cartItems: Product[] = []
 // Kopia av varukorgslistan
-export let shallowCopyCartItems = []
+export let shallowCopyCartItems: Product[] = []
 // Fraktkostnad
-export let shipping = 0
+export let shipping: number = 0
 // Summan som ska skickas till beställningsformuläret
-let sumToCheckout
+let sumToCheckout: number
 
 /* Gör prispåslag på 15%, fredag efter kl.15 fram till och med måndag kl.3 */ //----------------KRAV---------------
-const weekendPrice = () => {
+const weekendPrice: () => void = () => {
   // Aktuell tid
   const currentTime = new Date()
   if (
@@ -58,7 +60,7 @@ const weekendPrice = () => {
 weekendPrice()
 
 /* Skriver ut rating stjärnor enligt produkt rating */
-const setRating = rating => {
+const setRating: (rating: number) => string = rating => {
   let stars = ''
   for (let i = 0; i < Math.floor(rating); i++) {
     stars += `<i class="fa fa-star" aria-hidden="true"></i>`
@@ -73,14 +75,14 @@ const setRating = rating => {
 
 /**
  *Skriver ut alla tillgängliga produkter
- * @param {*} products Produktlista från /products.mjs
+ * @param products Produktlista från /products.mjs
  */
-const renderProducts = products => {
-  themeToggleBtn.classList.remove('hide')
+const renderProducts: (product: Product[]) => void = products => {
+  themeToggleBtn?.classList.remove('hide')
 
-  productDiv.innerHTML = ''
+  productDiv!.innerHTML = ''
   products.forEach(p => {
-    productDiv.innerHTML += `
+    productDiv!.innerHTML += `
     <article class="product" data-id=${p.id}>
         <img class="product__image" src="${p.image}" alt="Bild på munk med ${p.name} smak" width=${productImageWidth} height=${productImageHeight}>
         <div class="product-wrap">
@@ -102,11 +104,11 @@ const renderProducts = products => {
 renderProducts(productArray)
 
 /* Lägger till event till produkt knappar */
-const addBtnEvents = () => {
-  const decreaseBtn = document.querySelectorAll('.decrease-btn')
-  decreaseBtn.forEach(b => b.addEventListener('click', e => decreaseAmount(e)))
+const addBtnEvents: () => void = () => {
+  const decreaseBtn = document.querySelectorAll('.decrease-btn') as NodeListOf<HTMLElement>
+  decreaseBtn.forEach((b: HtmlEl) => b!.addEventListener('click', (e: MouseEvent) => decreaseAmount(e)))
 
-  const increaseBtn = document.querySelectorAll('.increase-btn')
+  const increaseBtn = document.querySelectorAll('.increase-btn') as NodeListOf<HTMLElement>
   increaseBtn.forEach(b => b.addEventListener('click', e => increaseAmount(e)))
 }
 addBtnEvents()
@@ -124,7 +126,7 @@ sortingFunc()
 shallowCopyCartItems = cartItems.map(item => ({ ...item }))
 
 // Minska produktantal i varukorgen
-const decreaseAmount = e => {
+const decreaseAmount: (e: MouseEvent) => void = e => {
   const eId = e.target.dataset.id
   const foundIndex = productArray.findIndex(product => product.id == eId)
   // Om produkt inte existerar i listan eller om produktens antal är 0, avsluta.
diff --git a/package-lock.json b/package-lock.json
index f6c2c30..f1343af 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -21,6 +21,7 @@
         "prettier": "^3.3.3",
         "sass": "^1.80.6",
         "tailwindcss": "^3.4.14",
+        "typescript": "^5.7.2",
         "vite": "^5.4.10"
       }
     },
@@ -3449,6 +3450,19 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/typescript": {
+      "version": "5.7.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.2.tgz",
+      "integrity": "sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==",
+      "dev": true,
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
     "node_modules/update-browserslist-db": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz",
diff --git a/package.json b/package.json
index 4bdf86d..f62d45a 100644
--- a/package.json
+++ b/package.json
@@ -23,9 +23,10 @@
     "prettier": "^3.3.3",
     "sass": "^1.80.6",
     "tailwindcss": "^3.4.14",
+    "typescript": "^5.7.2",
     "vite": "^5.4.10"
   },
   "dependencies": {
     "@fortawesome/fontawesome-free": "^6.6.0"
   }
-}
\ No newline at end of file
+}
diff --git a/products.mjs b/products.ts
similarity index 68%
rename from products.mjs
rename to products.ts
index c9cc972..6536143 100644
--- a/products.mjs
+++ b/products.ts
@@ -1,18 +1,20 @@
 // Länkar till bildfiler
-const appleFritter = './images/apple-fritter.jpeg'
-const chocholate = './images/chocholate.jpeg'
-const cookiesAndCream = './images/cookies&cream.jpeg'
-const cruller = './images/cruller.jpeg'
-const halloween = './images/halloween.jpeg'
-const mapleBacon = './images/maple-bacon.jpeg'
-const matcha = './images/matcha.jpeg'
-const peanutButter = './images/peanutbutter-jelly.jpeg'
-const pumpkin = './images/pumpkin-spice.jpeg'
-const smores = './images/smores.jpeg'
-const strawberry = './images/strawberry.jpeg'
+const appleFritter: string = './images/apple-fritter.jpeg'
+const chocholate: string = './images/chocholate.jpeg'
+const cookiesAndCream: string = './images/cookies&cream.jpeg'
+const cruller: string = './images/cruller.jpeg'
+const halloween: string = './images/halloween.jpeg'
+const mapleBacon: string = './images/maple-bacon.jpeg'
+const matcha: string = './images/matcha.jpeg'
+const peanutButter: string = './images/peanutbutter-jelly.jpeg'
+const pumpkin: string = './images/pumpkin-spice.jpeg'
+const smores: string = './images/smores.jpeg'
+const strawberry: string = './images/strawberry.jpeg'
+
+export type Product = {id: number, name: string, price: number, amount: number, image: string, rating: number, category: string}
 
 // Produkter
-const productArray = [
+export const productArray = [
   {
     id: 0,
     name: 'Apple-fritter',
@@ -115,4 +117,3 @@ const productArray = [
   },
 ]
 
-export default productArray
diff --git a/sorting.mjs b/sorting.ts
similarity index 92%
rename from sorting.mjs
rename to sorting.ts
index ecdda64..cdd2a1b 100644
--- a/sorting.mjs
+++ b/sorting.ts
@@ -1,5 +1,5 @@
-import productArray from './products.mjs'
-import { renderSortedProducts } from './main.mjs'
+import productArray from './products'
+import { renderSortedProducts } from './main'
 
 /* Lägger till sorterings funktion till alla sorterings knappar */ // ----------------KRAV--------------
 export const sortingFunc = () => {
diff --git a/theme-toggle.mjs b/theme-toggle.ts
similarity index 100%
rename from theme-toggle.mjs
rename to theme-toggle.ts
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..c9c555d
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,111 @@
+{
+  "compilerOptions": {
+    /* Visit https://aka.ms/tsconfig to read more about this file */
+
+    /* Projects */
+    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
+    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
+    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
+    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
+    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
+    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
+
+    /* Language and Environment */
+    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
+    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
+    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
+    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
+    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
+    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
+    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
+    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
+    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
+    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
+    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
+    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
+
+    /* Modules */
+    "module": "commonjs",                                /* Specify what module code is generated. */
+    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
+    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
+    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
+    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
+    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
+    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
+    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
+    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
+    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
+    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
+    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
+    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
+    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
+    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
+    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
+    // "resolveJsonModule": true,                        /* Enable importing .json files. */
+    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
+    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
+
+    /* JavaScript Support */
+    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
+    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
+    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
+
+    /* Emit */
+    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
+    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
+    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
+    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
+    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
+    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
+    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
+    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
+    // "removeComments": true,                           /* Disable emitting comments. */
+    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
+    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
+    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
+    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
+    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
+    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
+    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
+    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
+    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
+    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
+    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
+    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
+
+    /* Interop Constraints */
+    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
+    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
+    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
+    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
+    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
+    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
+    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
+
+    /* Type Checking */
+    "strict": true,                                      /* Enable all strict type-checking options. */
+    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
+    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
+    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
+    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
+    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
+    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
+    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
+    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
+    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
+    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
+    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
+    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
+    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
+    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
+    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
+    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
+    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
+    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
+    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
+
+    /* Completeness */
+    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
+    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
+  }
+}
-- 
2.47.0

